#!/usr/bin/env ruby
require 'json'
require 'openssl'
require 'fileutils'

def ensure_token!
  return if ENV['VAULT_TOKEN']
  ensure_token_file!
  ensure_token_tls!
  unless ENV['VAULT_TOKEN']
    raise "no authentication method against vault"
  end
end

def ensure_token_file!
  return unless @config[:token_file]
  return if ENV['VAULT_TOKEN']
  ENV['VAULT_TOKEN'] = File.read(@config.fetch(:token_file)).chomp
end

def ensure_token_tls!
  return unless @config[:tls]
  return if ENV['VAULT_TOKEN']
  args = []
  args.push("name=#{@config[:tls][:name]}") if @config[:tls][:name]

  env = {
    'VAULT_CLIENT_CERT' => @config[:tls].fetch(:cert_file),
    'VAULT_CLIENT_KEY' => @config[:tls].fetch(:key_file),
  }
  ENV['VAULT_TOKEN'] = IO.popen([env, 'vault', 'write', '-field=token', '-force', @config[:tls].fetch(:path), *args], 'r', &:read)
  raise "failed to login with TLS" unless $?.success?
end

@config = JSON.parse(File.read('/etc/nkmi-vault-cert.json'), symbolize_names: true)

ENV['VAULT_ADDR'] ||= @config[:vault_addr]

units_to_reload = []
units_to_restart = []

@config.fetch(:certs).each do |k, cert|
  if cert[:trust_ca_file]
    list_path = "#{cert[:trust_ca_file]}.list"
    trust_ca_list = [*cert[:trust_pkis], cert.fetch(:pki)].compact.uniq.sort
    if !File.exist?(list_path) || File.read(list_path).chomp != trust_ca_list.join(?\n)
      puts "=> #{k}: Refreshing trust_ca_file (#{trust_ca_list.join(', ')})"
      ensure_token!
      File.open(cert[:trust_ca_file], "a", 0644) do |io|
        io.sync = true
        trust_ca_list.each do |pki|
          system("vault", "read", "-field=certificate", "#{pki}/cert/ca", out: io, exception: true)
          io.print "\n"
        end
      end
      File.write list_path, "#{trust_ca_list.join(?\n)}\n"
    end

    units_to_reload.push(*cert.fetch(:units_to_reload, []))
    units_to_restart.push(*cert.fetch(:units_to_restart, []))
  end

  pki_name_path = cert[:pki_name_file] || "#{cert[:cert_file]}.pki.txt"

  if File.exist?(cert[:cert_file])
    threshold = (cert.fetch(:threshold_days, 7) * 86400)
    not_after = OpenSSL::X509::Certificate.new(File.read(cert[:cert_file])).not_after
    remain = not_after - Time.now

    pki_changed = !File.exist?(pki_name_path) || File.read(pki_name_path).chomp != cert.fetch(:pki)
    if remain > threshold && !pki_changed
      puts "=> #{k}: not_after=#{not_after} (skip)"
      next
    end
    puts " * #{k}: PKI changed" if pki_changed
  end
  puts "=> #{k}: issuing"

  args = ["#{cert.fetch(:pki)}/issue/#{cert.fetch(:role)}"]
  args << "ttl=#{cert.fetch(:ttl)}" if cert[:ttl]
  args << "common_name=#{cert.fetch(:cn)}"
  args << "alt_names=#{cert.fetch(:sans).join(?,)}" if cert[:sans]
  ips = cert.fetch(:ip_sans, [])
  if cert[:ip]
    ip = IO.popen(%w(ip -o r get 8.8.8.8), 'r', &:read).chomp.match(/src (.+?)(?: |$)/)[1]
    ips << ip
  end
  unless ips.empty?
    args << "ip_sans=#{ips.join(?,)}"
  end

  puts " * #{args.join(' ')}"

  ensure_token!
  result = IO.popen(['vault', 'write', '-format=json', *args], 'r', &:read)
  exitstatus = $?
  unless exitstatus.success?
    raise "vault-cert #{k} failed"
  end

  json = JSON.parse(result, symbolize_names: true)
  data = json.fetch(:data)

  key_file = cert.fetch(:key_file)
  File.open("#{key_file}.new", 'w', cert.fetch(:mode, '0600').to_i(8)) do |io|
    FileUtils.chown(cert.fetch(:owner, 'root'), cert.fetch(:group, 'root'), "#{key_file}.new")
    io.puts data.fetch(:private_key)
  end
  File.rename("#{key_file}.new", key_file)

  {
    cert.fetch(:ca_file) => [data.fetch(:ca_chain, data.fetch(:issuing_ca))].flatten.join(?\n),
    cert.fetch(:cert_file) => data.fetch(:certificate),
    cert.fetch(:fullchain_file) => [data.fetch(:certificate), data.fetch(:ca_chain, data.fetch(:issuing_ca))].flatten.join(?\n),
  }.each do |path, content|
    File.open("#{path}.new", 'w', 0644) do |io|
      FileUtils.chown(cert.fetch(:owner, 'root'), cert.fetch(:group, 'root'), "#{path}.new")
      io.puts content
    end
    File.rename("#{path}.new", path)
  end

  File.write pki_name_path, "#{cert[:pki]}\n"

  puts " * #{k}: serial=#{data.fetch(:serial_number)}"

  units_to_reload.push(*cert.fetch(:units_to_reload, []))
  units_to_restart.push(*cert.fetch(:units_to_restart, []))
end

puts "=> Notifying updates"
units_to_reload.uniq.each do |unit|
  puts " * systemctl reload #{unit}"
  system("systemctl", "reload", unit)
end
units_to_restart.uniq.each do |unit|
  puts " * systemctl restart #{unit}"
  system("systemctl", "restart", unit)
end

