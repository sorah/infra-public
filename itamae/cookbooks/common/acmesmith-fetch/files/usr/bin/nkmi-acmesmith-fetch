#!/usr/bin/env ruby
require 'aws-sdk-s3'
require 'json'
require 'fileutils'

config = JSON.parse(File.read('/etc/nkmi-acmesmith-fetch.json'))

store_path = config.fetch('store_path')
aws_credential = if config.fetch('aws_use_access_key', false)
                   Aws::Credentials.new(config.fetch('aws_access_key_id'), config.fetch('aws_secret_access_key'))
                 else
                   nil
                 end
s3_region = config.fetch('s3_region')
s3_bucket = config.fetch('s3_bucket')
s3_prefix = config.fetch('s3_prefix', '')
cert_passphrase = config.fetch('cert_passphrase', nil)
common_names = config.fetch('common_names', {})

s3_config = {region: s3_region}
s3_config[:credentials] = aws_credential if aws_credential

current_file_path = File.join(store_path, 'current.json')
current = if File.exist?(current_file_path) 
            JSON.parse(File.read(current_file_path))
          else
            {}
          end

s3 = Aws::S3::Client.new(s3_config)

updated = false

puts "=> Updating acmesmith certs"
common_names.each do |common_name, options|
  cert_prefix = "#{s3_prefix}certs/#{common_name}/"
  latest = begin
    s3.get_object(bucket: s3_bucket, key:  "#{cert_prefix}current").body.read.chomp
  rescue Aws::S3::Errors::NoSuchKey, Aws::S3::Errors::AccessDenied
    nil
  end
  next unless latest

  next if latest == current[common_name]
  updated = true

  puts "* #{common_name.inspect}: #{latest.inspect} from #{current[common_name].inspect}"

  cert_store_path = File.join(store_path, common_name)
  FileUtils.mkdir_p cert_store_path

  %w(cert.pem chain.pem fullchain.pem).each do |name|
    begin
      path = File.join(cert_store_path, name)
      File.open("#{path}.new", 'w', 0644) do |io|
        key = "#{cert_prefix}#{latest}/#{name}"
        s3.get_object(bucket: s3_bucket, key: key, response_target: io)
      end
      FileUtils.chown(options.fetch('owner', 'root'), options.fetch('group', 'root'), "#{path}.new")
      File.rename("#{path}.new", path)
    ensure
      File.unlink("#{path}.new") if path && File.exist?("#{path}.new")
    end
  end
  begin
    name = 'key.pem'
    path = File.join(cert_store_path, name)
    File.open("#{path}.new", 'w', 0640) do |io|
      key = "#{cert_prefix}#{latest}/#{name}"
      io.puts OpenSSL::PKey::RSA.new(s3.get_object(bucket: s3_bucket, key: key).body.read, config.fetch('cert_passphrase', '')).to_pem
    end
    FileUtils.chown(options.fetch('owner', 'root'), options.fetch('group', 'root'), "#{path}.new")
    File.rename("#{path}.new", path)
  ensure
    File.unlink("#{path}.new") if path && File.exist?("#{path}.new")
  end

  current[common_name] = latest
end

if updated
  puts "=> Notifying updates"
  config.fetch('units_to_reload', []).each do |unit|
    puts " * systemctl reload #{unit}"
    system("systemctl", "reload", unit)
  end
  config.fetch('units_to_restart', []).each do |unit|
    puts " * systemctl restart #{unit}"
    system("systemctl", "restart", unit)
  end
end

File.write current_file_path, "#{current.to_json}\n"
