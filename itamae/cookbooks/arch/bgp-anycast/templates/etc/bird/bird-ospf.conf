# vim: set ft=bird nofoldenable

<%- if node[:bgp_anycast][:router_id] -%>
router id <%= node[:bgp_anycast][:router_id].split(?/)[0] %>;
<%- end -%>

log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
debug protocols {states, interfaces};
graceful restart wait 15;

#protocol kernel {
#  interface "lo";
#  learn on;
#  ipv4 {
#    import all;
#    export none;
#  }
#}

protocol device {
  scan time 10;
}

protocol ospf v2 ospf4 {
  merge external on;
  ipv4 {
    import all;
    export all;
  };

<%- areas = node[:bgp_anycast].dig(:ospf, :areas) -%>
<%- if areas; areas.each do |area_id, area| -%>
  area <%= area_id %> {
<%- area.fetch(:interfaces, {}).each do |iface_name, iface| -%>
    interface "<%= iface_name %>" {
      cost <%= iface.fetch(:cost, 10) %>;
      hello <%= iface.fetch(:hello, 2) %>;
      dead <%= iface.fetch(:dead, 6) %>;
    };
<%- end -%>
  };
<%- end; end -%>
}

protocol bgp bgp_exabgp {
  local as 4200000000;
  neighbor 127.0.0.1 as <%= node[:bgp_anycast].fetch(:asn) %>;
  multihop 2;
  passive on;

  hold time 15;
  startup hold time 90;
  keepalive time 3;
  connect retry time 5;
  connect delay time 5;
  error wait time 30, 30;
  error forget time 30;
  default bgp_local_pref 100;
  med metric on;

  ipv4 {
    next hop self;
    import filter {
      if ( net !~ [ 0.0.0.0/0{32,32} ] ) then {
        reject;
      }
      /* FIXME: iBGP */
      ospf_metric1 = 200 + bgp_med;
      preference = 200;
      if ( bgp_med >= 50000 ) then {
        preference = 10;
      }
      accept;
    };
    export none;
  };
}

include "/etc/bird/bird.conf.d/*.conf";
