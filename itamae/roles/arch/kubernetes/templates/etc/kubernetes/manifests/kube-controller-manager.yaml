apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  annotations:
    prometheus.nkmi.me/scrape-port-secure: '10257'
  labels:
    component: kube-controller-manager
    tier: control-plane
    prometheus.nkmi.me/scrape: 'true'
  name: kube-controller-manager
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-controller-manager
    - --allocate-node-cidrs=true
    - --authentication-kubeconfig=/etc/kubernetes/controller-manager/kubeconfig.yaml
    - --authorization-kubeconfig=/etc/kubernetes/controller-manager/kubeconfig.yaml
    - --kubeconfig=/etc/kubernetes/controller-manager/kubeconfig.yaml
    # - --bind-address=127.0.0.1
    - --tls-cert-file=/etc/ssl/self/k8s-kube-controller-manager/fullchain.pem
    - --tls-private-key-file=/etc/ssl/self/k8s-kube-controller-manager/key.pem
    - --cluster-cidr=<%= node[:kubernetes].fetch(:cluster_cidr) %>
    #- --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
    #- --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
    #- --controllers=*,bootstrapsigner,tokencleaner
    - --controllers=*,tokencleaner
    - --leader-elect=true
    - --node-cidr-mask-size=<%= node[:kubernetes].fetch(:node_cidr_mask_size) %>
    - --requestheader-client-ca-file=/etc/ssl/self/k8s-frontproxy/trust.pem
    - --root-ca-file=/etc/ssl/self/k8s-kube-controller-manager/trust.pem
    - --service-account-private-key-file=/etc/kubernetes/apiserver/sa.key
    - --service-cluster-ip-range=<%= node[:kubernetes].fetch(:service_cluster_ip_range) %>
    - --use-service-account-credentials=true
    - '--feature-gates=EphemeralContainers=true'
<%- if node[:kubernetes][:external_cloud_provider] -%>
    - '--cloud-provider=external'
<%- elsif node[:kubernetes][:cloud_provider] -%>
    - '--cloud-provider=<%= node[:kubernetes][:cloud_provider] %>'
<%- end -%>
    image: k8s.gcr.io/kube-controller-manager:v<%= node[:kubernetes].fetch(:version) %>
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10257
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-controller-manager
    resources:
      requests:
        cpu: 200m
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ca-certs
      readOnly: true
    - mountPath: /etc/ca-certificates
      name: etc-ca-certificates
      readOnly: true
    - mountPath: /etc/ssl/self/k8s-kube-controller-manager
      name: certs
      readOnly: true
    - mountPath: /etc/ssl/self/k8s-frontproxy/trust.pem
      name: frontproxy-ca
      readOnly: true

    - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
      name: flexvolume-dir
    - mountPath: /etc/kubernetes/apiserver/sa.key
      name: sa-key
      readOnly: true
    - mountPath: /etc/kubernetes/controller-manager
      name: etc-controller-manager
      readOnly: true
    - mountPath: /usr/share/ca-certificates
      name: usr-share-ca-certificates
      readOnly: true
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /etc/ssl/certs
      type: DirectoryOrCreate
    name: ca-certs
  - hostPath:
      path: /etc/ca-certificates
      type: DirectoryOrCreate
    name: etc-ca-certificates
  - hostPath:
      path: /etc/ssl/self/k8s-kube-controller-manager
      type: DirectoryOrCreate
    name: certs
  - hostPath:
      path: /etc/ssl/self/k8s-frontproxy/trust.pem
      type: File
    name: frontproxy-ca
  - hostPath:
      path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
      type: DirectoryOrCreate
    name: flexvolume-dir
  - hostPath:
      path: /etc/kubernetes/apiserver/sa.key
      type: FileOrCreate
    name: sa-key
  - hostPath:
      path: /etc/kubernetes/controller-manager
      type: DirectoryOrCreate
    name: etc-controller-manager
  - hostPath:
      path: /usr/share/ca-certificates
      type: DirectoryOrCreate
    name: usr-share-ca-certificates
status: {}
