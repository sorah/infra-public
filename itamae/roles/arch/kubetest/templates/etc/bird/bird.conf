# vim: set ft=bird nofoldenable

<%- if node[:kubernetes][:routing][:router_id] -%>
router id <%= node[:kubernetes][:routing][:router_id] %>;
<%- else -%>
router id from "eno*", "enp*", "ens*", "eth*";
<%- end -%>

log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
debug protocols {states, interfaces};
graceful restart wait 15;

ipv4 table t4_kernel;
ipv4 table t4_ospf;

protocol device {
  scan time 10;
}

protocol kernel kernel4 {
  kernel table 254;

  learn on;
  persist off;
  graceful restart on;
  scan time 100;

  ipv4 {
    table t4_kernel;
    import none;
    export all;
  };
}

protocol kernel coil4 {
  kernel table 119;

  learn on;
  persist off;
  graceful restart on;
  scan time 100;

  ipv4 {
    table t4_ospf;
    import all;
    export none;
  };
}

protocol pipe kernel2ospf {
  table t4_kernel;
  peer table t4_ospf;

  import filter {
    if ( proto = "ospf4" ) then {
      accept;
    }
    reject;
  };
  export none;
}


<%- if node.dig(:kubernetes, :routing, :ospf) -%>
protocol ospf v2 ospf4 {
  merge external on;
  ipv4 {
    table t4_ospf;

    import filter {
      accept;
    };
    export filter {
      if ( proto = "coil4" ) then {
        ospf_metric1 = 5;
        accept;
      }
      if ( proto = "bgp_metallb" || ((64680, 1) ~ bgp_community) ) then {
        ospf_metric1 = 5;
        accept;
      }
      reject;
    };
  };

<%- areas = node.dig(:kubernetes, :routing, :ospf, :areas) -%>
<%- if areas; areas.each do |area_id, area| -%>
  area <%= area_id %> {
<%- area.fetch(:interfaces, {}).each do |iface_name, iface| -%>
    interface "<%= iface_name %>" {
      cost <%= iface.fetch(:cost, 500) %>;
      hello <%= iface.fetch(:hello, 2) %>;
      dead <%= iface.fetch(:dead, 6) %>;
      priority 0;
    };
<%- end -%>
  };
<%- end; end -%>
}
<%- end -%>

<%- node[:kubernetes][:routing][:bgp_peers].each do |peer_name, peer| -%>
protocol bgp bgp_<%= peer_name %> {
  local as <%= peer[:local_asn] || node[:kubernetes][:routing].fetch(:asn) %>;
  neighbor <%= peer.fetch(:address) %> as <%= peer.fetch(:asn) %>;
<%- unless peer.fetch(:source, :auto) == :auto -%>
  source address <%=  peer[:source] %>;
<%- end -%>

  hold time 15;
  startup hold time 90;
  keepalive time 3;
  connect retry time 5;
  connect delay time 5;
  error wait time 30, 30;
  error forget time 30;
  default bgp_local_pref 100;
  med metric on;

  ipv4 {
    table t4_ospf;
    next hop self;
    import filter {
      reject;
    };
    export none;
  };
}
<%- end -%>

protocol bgp bgp_metallb {
  local as 64680;
  neighbor range 127.0.0.0/8 as 64680;
  dynamic name "dynbgp_metallb";
  hold time 12;
  startup hold time 20;
  keepalive time 2;
  connect retry time 5;
  connect delay time 5;
  error wait time 20, 20;
  error forget time 20;
  default bgp_local_pref 100;
  med metric on;
  ipv4 {
    table t4_ospf;
    export none;
    import filter {
      bgp_community.add((64680, 1));
      accept;
    };
  };
}

include "/etc/bird/bird.conf.d/*.conf";
